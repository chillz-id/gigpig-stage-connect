#!/usr/bin/env node

/**
 * Verify MCP Configuration is Ready for Testing
 * Checks that all placeholder tokens have been replaced with real values
 */

import { readFileSync } from 'fs';

console.log('üîç Verifying MCP Configuration Readiness');
console.log('='.repeat(50));

try {
  // Read MCP configuration
  const mcpConfig = JSON.parse(readFileSync('.mcp.json', 'utf8'));
  
  let placeholderCount = 0;
  let workingTokens = 0;
  let totalServers = 0;
  
  const results = [];
  
  // Check each MCP server
  for (const [serverName, config] of Object.entries(mcpConfig.mcpServers)) {
    totalServers++;
    
    console.log(`\nüìã Checking ${serverName}:`);
    
    if (!config.env) {
      console.log('   ‚úÖ No environment tokens required');
      results.push({ name: serverName, status: '‚úÖ Ready', issues: [] });
      workingTokens++;
      continue;
    }
    
    const issues = [];
    let serverReady = true;
    
    for (const [envVar, value] of Object.entries(config.env)) {
      if (typeof value === 'string') {
        if (value.includes('YOUR_') || value.includes('_HERE') || value.includes('CONTACT_OWNER') || value.includes('GET_FROM')) {
          console.log(`   ‚ùå ${envVar}: PLACEHOLDER DETECTED`);
          placeholderCount++;
          issues.push(`${envVar}: Placeholder token`);
          serverReady = false;
        } else if (value.includes('PLACEHOLDER') || value.includes('NEEDS_')) {
          console.log(`   ‚ö†Ô∏è  ${envVar}: Needs real token`);
          placeholderCount++;
          issues.push(`${envVar}: Needs real token`);
          serverReady = false;
        } else {
          console.log(`   ‚úÖ ${envVar}: Token configured`);
        }
      }
    }
    
    if (serverReady) {
      workingTokens++;
    }
    
    const status = serverReady ? '‚úÖ Ready' : (issues.length === 1 && issues[0].includes('Needs real token') ? '‚ö†Ô∏è  Needs Token' : '‚ùå Not Ready');
    results.push({ name: serverName, status, issues });
  }
  
  // Summary
  console.log('\n' + '='.repeat(50));
  console.log('üìä MCP Configuration Summary:');
  console.log('='.repeat(50));
  
  results.forEach(result => {
    console.log(`${result.status.padEnd(15)} ${result.name}`);
    if (result.issues.length > 0) {
      result.issues.forEach(issue => {
        console.log(`                    - ${issue}`);
      });
    }
  });
  
  console.log('\nüìà Statistics:');
  console.log(`‚úÖ Ready Servers: ${workingTokens}`);
  console.log(`‚ö†Ô∏è  Need Tokens: ${totalServers - workingTokens}`);
  console.log(`‚ùå Placeholder Tokens Found: ${placeholderCount}`);
  console.log(`üìä Total Servers: ${totalServers}`);
  
  // Status assessment
  const readyPercentage = Math.round((workingTokens / totalServers) * 100);
  
  console.log('\nüéØ Readiness Assessment:');
  if (readyPercentage >= 80) {
    console.log(`üöÄ ${readyPercentage}% READY - Most services will work!`);
  } else if (readyPercentage >= 60) {
    console.log(`üîß ${readyPercentage}% READY - Several fixes needed`);
  } else {
    console.log(`‚ùå ${readyPercentage}% READY - Major configuration issues`);
  }
  
  // Next steps
  console.log('\nüìã Next Steps:');
  const needsTokens = results.filter(r => r.status.includes('Needs Token') || r.status.includes('Not Ready'));
  
  if (needsTokens.length === 0) {
    console.log('‚úÖ All servers ready! MCP tools should work after Claude Code restart.');
  } else {
    console.log('üîß Fix these servers for full functionality:');
    needsTokens.forEach(server => {
      console.log(`   - ${server.name}: ${server.issues.join(', ')}`);
    });
  }
  
} catch (error) {
  console.error('‚ùå Error reading MCP configuration:', error.message);
  process.exit(1);
}

console.log('\n‚úÖ Configuration check complete!');