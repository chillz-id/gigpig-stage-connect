{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(npm run dev:*)",
      "Bash(node:*)",
      "Bash(psql:*)",
      "Bash(ls:*)",
      "mcp__supabase__list_tables",
      "mcp__supabase__execute_sql",
      "mcp__github__search_repositories",
      "mcp__brave-search__brave_web_search",
      "mcp__metricool__get_brands",
      "Bash(curl:*)",
      "Bash(env)",
      "Bash(npx:*)",
      "Bash(sudo sed:*)",
      "Bash(sudo grep -E \"XERO\" /etc/standup-sydney/credentials.env)",
      "Bash(chmod:*)",
      "Bash(docker start:*)",
      "Bash(docker logs:*)",
      "Bash(docker exec:*)",
      "mcp__supabase__apply_migration",
      "Bash(npm install)",
      "Bash(npm install:*)",
      "Bash(npm run build:dev:*)",
      "mcp__ide__getDiagnostics",
      "mcp__supabase__list_migrations",
      "Bash(npm run test:event-rls:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(npm run test:*)",
      "Bash(npm test:*)",
      "Bash(npm run lint)",
      "Bash(npm run build:*)",
      "Bash(node /root/.claude-multi-agent/scripts/claude-graph-integration.js check \"event validation form validation user warnings\")",
      "mcp__supabase__get_project_url",
      "mcp__supabase__list_edge_functions",
      "mcp__supabase__deploy_edge_function",
      "Bash(sudo:*)",
      "Bash(cp:*)",
      "Bash(touch:*)",
      "Bash(timeout:*)",
      "Bash(mkdir:*)",
      "Bash(source .env)",
      "Bash(python3:*)",
      "Bash(XERO_CLIENT_SECRET=test-secret node test-xero-integration-complete.js)",
      "Bash(systemctl status:*)",
      "Bash(pkill:*)",
      "Bash(npm run type-check:*)",
      "WebFetch(domain:localhost)",
      "Bash(ss:*)",
      "Bash(cat:*)",
      "Bash(sudo systemctl status:*)",
      "Bash(mcp:*)",
      "Bash(pm2 list:*)",
      "Bash(nginx:*)",
      "Bash(journalctl:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(export N8N_API_KEY=\"n8n_api_key_standup_sydney_live_production\")",
      "Bash(git fetch:*)",
      "Bash(git checkout:*)",
      "Bash(N8N_API_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1M2UzN2FhMC03MTc4LTRmMmYtODBhYS00ODNiYmE1ODc0YWYiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzUxNTcwMDc2fQ._zbYlvtzSMRFHnQu6O_L2LhJU4Ib1655bynbmoXeqMo\" python3 fix_workflow_headers.py)",
      "Bash(git merge:*)",
      "Bash(N8N_API_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1M2UzN2FhMC03MTc4LTRmMmYtODBhYS00ODNiYmE1ODc0YWYiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzUxNTcwMDc2fQ._zbYlvtzSMRFHnQu6O_L2LhJU4Ib1655bynbmoXeqMo\" python3 fix_workflow_headers_v2.py)",
      "Bash(N8N_API_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1M2UzN2FhMC03MTc4LTRmMmYtODBhYS00ODNiYmE1ODc0YWYiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzUxNTcwMDc2fQ._zbYlvtzSMRFHnQu6O_L2LhJU4Ib1655bynbmoXeqMo\" python3 fix_workflow_headers_minimal.py)",
      "Bash(N8N_API_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1M2UzN2FhMC03MTc4LTRmMmYtODBhYS00ODNiYmE1ODc0YWYiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzUxNTcwMDc2fQ._zbYlvtzSMRFHnQu6O_L2LhJU4Ib1655bynbmoXeqMo\" python3 -c \"\nfrom n8n_standalone import N8NMCP\nimport json\nn8n = N8NMCP()\n\n# Try to get the workflow again to confirm it was updated\nresult = n8n.get_workflow(''GIKrozPgzkjMBbhn'')\nif result[''success'']:\n    workflow = result[''workflow'']\n    \n    # Check if the Get Events node was fixed\n    get_events_node = next((node for node in workflow[''nodes''] if node[''name''] == ''Get Events''), None)\n    if get_events_node:\n        print(''‚úÖ Get Events node found'')\n        print(f''  - Has headerParametersUi: {\"\"headerParametersUi\"\" in get_events_node[\"\"parameters\"\"]}'')\n        print(f''  - Has headerParameters: {\"\"headerParameters\"\" in get_events_node[\"\"parameters\"\"]}'')\n        if ''headerParameters'' in get_events_node[''parameters'']:\n            print(f''  - headerParameters value: {get_events_node[\"\"parameters\"\"][\"\"headerParameters\"\"]}'')\n    \n    # Check if the Get Orders node was fixed  \n    get_orders_node = next((node for node in workflow[''nodes''] if node[''name''] == ''Get Orders''), None)\n    if get_orders_node:\n        print(''‚úÖ Get Orders node found'')\n        print(f''  - Has headerParametersUi: {\"\"headerParametersUi\"\" in get_orders_node[\"\"parameters\"\"]}'')\n        print(f''  - Has headerParameters: {\"\"headerParameters\"\" in get_orders_node[\"\"parameters\"\"]}'')\n        if ''headerParameters'' in get_orders_node[''parameters'']:\n            print(f''  - headerParameters value: {get_orders_node[\"\"parameters\"\"][\"\"headerParameters\"\"]}'')\nelse:\n    print(f''‚ùå Failed to get workflow: {result[\"\"error\"\"]}'')\n\")",
      "Bash(N8N_API_KEY=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1M2UzN2FhMC03MTc4LTRmMmYtODBhYS00ODNiYmE1ODc0YWYiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzUxNTcwMDc2fQ._zbYlvtzSMRFHnQu6O_L2LhJU4Ib1655bynbmoXeqMo\" python3 -c \"\nimport requests\nimport json\n\n# Try to trigger the workflow manually using the N8N API\napi_key = ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1M2UzN2FhMC03MTc4LTRmMmYtODBhYS00ODNiYmE1ODc0YWYiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzUxNTcwMDc2fQ._zbYlvtzSMRFHnQu6O_L2LhJU4Ib1655bynbmoXeqMo''\nheaders = {\n    ''X-N8N-API-KEY'': api_key,\n    ''Content-Type'': ''application/json''\n}\n\n# Try different endpoints to trigger the workflow\nendpoints = [\n    ''http://localhost:5678/api/v1/workflows/GIKrozPgzkjMBbhn/execute'',\n    ''http://localhost:5678/api/v1/workflows/GIKrozPgzkjMBbhn/trigger'',\n    ''http://localhost:5678/webhook/GIKrozPgzkjMBbhn''\n]\n\nfor endpoint in endpoints:\n    try:\n        print(f''üîÑ Trying: {endpoint}'')\n        response = requests.post(endpoint, headers=headers, json={})\n        print(f''‚úÖ Success: {response.status_code}'')\n        if response.status_code == 200:\n            print(f''Response: {response.json()}'')\n            break\n    except Exception as e:\n        print(f''‚ùå Error: {e}'')\n        continue\n\")",
      "Bash(kill:*)",
      "Bash(pm2 start npm:*)",
      "Bash(pm2 startup:*)",
      "Bash(pm2 save:*)",
      "Bash(pm2 status:*)",
      "Bash(pm2 logs:*)",
      "Bash(python:*)",
      "Bash(npm run:*)",
      "WebFetch(domain:api.humanitix.com)",
      "WebFetch(domain:humanitix.stoplight.io)",
      "WebFetch(domain:github.com)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "supabase",
    "github",
    "notion",
    "slack",
    "metricool",
    "xero",
    "canva",
    "context7",
    "puppeteer",
    "filesystem",
    "brave-search",
    "n8n-local",
    "@magicuidesign/mcp",
    "apify",
    "task-master"
  ]
}