Permissions 0644 for n8n settings file /home/node/.n8n/config are too wide. This is ignored for now, but in the future n8n will attempt to change the permissions automatically. To automatically enforce correct permissions now set N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true (recommended), or turn this check off set N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false.

There are deprecations related to your environment variables. Please take the recommended actions to update your configuration:
 - DB_SQLITE_POOL_SIZE -> Running SQLite without a pool of read connections is deprecated. Please set `DB_SQLITE_POOL_SIZE` to a value higher than zero. See: https://docs.n8n.io/hosting/configuration/environment-variables/database/#sqlite
 - N8N_RUNNERS_ENABLED -> Running n8n without task runners is deprecated. Task runners will be turned on by default in a future version. Please set `N8N_RUNNERS_ENABLED=true` to enable task runners now and avoid potential issues in the future. Learn more: https://docs.n8n.io/hosting/configuration/task-runners/

[{"createdAt":"2025-08-02T04:30:49.829Z","updatedAt":"2025-08-22T00:09:04.097Z","id":"py2wq9zchBz0TD9j","name":"Humanitix Historical Import - All Time (Restored)","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"manual-trigger","name":"Manual Trigger","type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[240,304]},{"parameters":{"jsCode":"// Import ALL historical data\n// Set a very early start date to get everything\nconst startDate = new Date('2020-01-01');\nconst endDate = new Date();\n\nconsole.log(`Importing ALL historical data from ${startDate.toDateString()} to ${endDate.toDateString()}`);\n\nreturn [{\n  json: {\n    startDate: startDate.toISOString(),\n    endDate: endDate.toISOString(),\n    currentPage: 1,\n    hasMore: true\n  }\n}];"},"id":"set-params","name":"Set Parameters","type":"n8n-nodes-base.code","typeVersion":2,"position":[464,304]},{"parameters":{"jsCode":"// Handle pagination for getting ALL events\nconst currentPage = $json.currentPage || 1;\nconst maxPages = 100; // Safety limit\n\nif (currentPage > maxPages) {\n  console.log(`Reached max pages limit (${maxPages})`);\n  return [];\n}\n\nreturn [{\n  json: {\n    ...$json,\n    page: currentPage\n  }\n}];"},"id":"pagination-loop","name":"Pagination Loop","type":"n8n-nodes-base.code","typeVersion":2,"position":[688,304]},{"parameters":{"url":"https://api.humanitix.com/v1/events","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"page","value":"={{ $json.page }}"},{"name":"pageSize","value":"100"}]},"sendHeaders":true,"headerParameters":{"parameters":[]},"options":{},"httpHeaderAuth":"uLfBC8aVXqgfKrfF"},"id":"get-all-events","name":"Get ALL Events","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[912,304],"alwaysOutputData":false,"credentials":{"httpHeaderAuth":{"id":"aKivaYZ2GgdV4BF8","name":"Header Auth account"}}},{"parameters":{"jsCode":"// Process the events response and initialize orders pagination\nconst response = $input.all()[0].json;\nlet events = [];\n\n// Handle different response formats\nif (Array.isArray(response)) {\n  events = response;\n} else if (response.events && Array.isArray(response.events)) {\n  events = response.events;\n} else if (response.data && Array.isArray(response.data)) {\n  events = response.data;\n}\n\nconsole.log(`Found ${events.length} events on page ${$json.page}`);\n\n// Return events with orders pagination initialized\nreturn events.map(event => ({\n  json: {\n    event,\n    ordersPage: 1,\n    ordersHasMore: true,\n    eventHasMore: events.length === 100,\n    nextEventPage: events.length === 100 ? ($json.page + 1) : null\n  }\n}));"},"id":"process-events","name":"Process Events","type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,304]},{"parameters":{"jsCode":"// Orders pagination logic\nconst ordersPage = $json.ordersPage || 1;\nconst maxOrdersPages = 50; // Safety limit per event\n\nconsole.log(`Getting orders page ${ordersPage} for event: ${$json.event?.title || 'Unknown'}`);\n\nif (ordersPage > maxOrdersPages) {\n  console.log(`Reached max orders pages limit (${maxOrdersPages}) for event`);\n  return [];\n}\n\nreturn [{\n  json: {\n    ...$json,\n    currentOrdersPage: ordersPage\n  }\n}];"},"id":"orders-pagination-loop","name":"Orders Pagination Loop","type":"n8n-nodes-base.code","typeVersion":2,"position":[1312,304]},{"parameters":{"url":"=https://api.humanitix.com/v1/events/{{ $json.event._id || $json.event.id }}/orders","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"page","value":"={{ $json.currentOrdersPage }}"},{"name":"pageSize","value":"100"}]},"sendHeaders":true,"headerParameters":{"parameters":[]},"options":{},"httpHeaderAuth":"uLfBC8aVXqgfKrfF"},"id":"get-all-orders","name":"Get ALL Orders","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1504,304],"credentials":{"httpHeaderAuth":{"id":"aKivaYZ2GgdV4BF8","name":"Header Auth account"}}},{"parameters":{"jsCode":"// Process orders response and handle pagination\nconst orderResponse = $input.all()[0]?.json || {};\nlet orders = [];\n\n// Extract orders from response\nif (Array.isArray(orderResponse)) {\n  orders = orderResponse;\n} else if (orderResponse.orders && Array.isArray(orderResponse.orders)) {\n  orders = orderResponse.orders;\n} else if (orderResponse.data && Array.isArray(orderResponse.data)) {\n  orders = orderResponse.data;\n}\n\nconst eventInfo = $json.event || {};\nconst eventName = eventInfo?.title || eventInfo?.name || 'Unknown Event';\nconst currentPage = $json.currentOrdersPage || 1;\n\nconsole.log(`Found ${orders.length} orders on page ${currentPage} for event: ${eventName}`);\n\n// Check if there are more orders pages\nconst ordersHasMore = orders.length === 100; // Full page = likely more pages\n\nif (orders.length === 0) {\n  console.log(`No orders found for event: ${eventName}`);\n  return [];\n}\n\n// Return orders with pagination info\nreturn orders.map(order => ({\n  json: {\n    ...order,\n    event: eventInfo,\n    ordersHasMore,\n    nextOrdersPage: ordersHasMore ? (currentPage + 1) : null,\n    isLastOrdersPage: !ordersHasMore\n  }\n}));"},"id":"process-orders-response","name":"Process Orders Response","type":"n8n-nodes-base.code","typeVersion":2,"position":[1728,304]},{"parameters":{"jsCode":"// Ultra-safe Transform Orders - handles ALL undefined cases\n  const orderResponse = $input.all()[0]?.json || {};\n  const eventInfo = $json?.event || {};\n  const transformedOrders = [];\n\n  // Ultra-safe extract orders from response\n  let orders = [];\n  try {\n    if (Array.isArray(orderResponse)) {\n      orders = orderResponse;\n    } else if (orderResponse && orderResponse.orders && Array.isArray(orderResponse.orders)) {\n      orders = orderResponse.orders;\n    } else if (orderResponse && orderResponse.data && Array.isArray(orderResponse.data)) {\n      orders = orderResponse.data;\n    }\n  } catch (e) {\n    console.log('Error extracting orders:', e.message);\n    orders = [];\n  }\n\n  // Ultra-safe event name with multiple fallbacks - THIS FIXES LINE 16 ERROR\n  let eventName = 'Unknown Event';\n  try {\n    eventName = eventInfo?.title || eventInfo?.name || eventInfo?.eventName || 'Unknown Event';\n  } catch (e) {\n    console.log('Error getting event name:', e.message);\n    eventName = 'Unknown Event';\n  }\n\n  console.log(`Processing ${orders.length} orders for event: ${eventName}`);\n\n  for (let i = 0; i < orders.length; i++) {\n    try {\n      // Ultra-safe order processing\n      const orderData = orders[i] || {};\n      const buyer = orderData.buyer || {};\n      const tickets = Array.isArray(orderData.tickets) ? orderData.tickets : [];\n\n      // Ultra-safe ticket types extraction\n      let ticketTypes = 'General';\n      try {\n        if (tickets.length > 0) {\n          const typeNames = [];\n          for (const ticket of tickets) {\n            const t = ticket || {};\n            const ticketType = t.ticketType || t.type || {};\n            const name = ticketType.name || t.name || 'General';\n            typeNames.push(name);\n          }\n          ticketTypes = typeNames.length > 0 ? typeNames.join(', ') : 'General';\n        }\n      } catch (e) {\n        console.log('Error processing ticket types:', e.message);\n        ticketTypes = 'General';\n      }\n\n      // Ultra-safe quantity calculation\n      let totalQuantity = 1;\n      try {\n        if (tickets.length > 0) {\n          totalQuantity = 0;\n          for (const ticket of tickets) {\n            const t = ticket || {};\n            const qty = parseInt(t.quantity) || 1;\n            totalQuantity += qty;\n          }\n          if (totalQuantity === 0) totalQuantity = 1;\n        }\n      } catch (e) {\n        console.log('Error calculating quantity:', e.message);\n        totalQuantity = 1;\n      }\n\n      // Ultra-safe order ID\n      const orderId = orderData._id || orderData.id || `unknown-${i}`;\n\n      // Ultra-safe customer name\n      let customerName = 'Anonymous';\n      try {\n        const firstName = orderData.firstName || buyer.firstName || '';\n        const lastName = orderData.lastName || buyer.lastName || '';\n        customerName = `${firstName} ${lastName}`.trim() || 'Anonymous';\n      } catch (e) {\n        customerName = 'Anonymous';\n      }\n\n      // Ultra-safe email\n      const email = orderData.email || buyer.email || \"no-email@example.com\";\n\n      // Ultra-safe phone\n      const phone = orderData.phone || buyer.phone || null;\n\n      // Ultra-safe amount\n      let amount = 0;\n      try {\n        amount = parseFloat(orderData.total || orderData.amount || orderData.price || 0);\n        if (isNaN(amount)) amount = 0;\n      } catch (e) {\n        amount = 0;\n      }\n\n      // Ultra-safe dates\n      let eventDate = new Date().toISOString();\n      try {\n        eventDate = eventInfo.date || eventInfo.startDate || new Date().toISOString();\n      } catch (e) {\n        eventDate = new Date().toISOString();\n      }\n\n      let purchaseDate = new Date().toISOString();\n      try {\n        purchaseDate = orderData.createdAt || orderData.purchaseDate || new Date().toISOString();\n      } catch (e) {\n        purchaseDate = new Date().toISOString();\n      }\n\n      // Ultra-safe venue\n      let venue = 'Online';\n      try {\n        venue = eventInfo.venue?.name || eventInfo.location?.name || eventInfo.location || 'Online';\n      } catch (e) {\n        venue = 'Online';\n      }\n\n      // Ultra-safe currency and status\n      const currency = orderData.currency || eventInfo.currency || \"AUD\";\n      const status = (orderData.status || \"completed\").toLowerCase();\n\n      const orderEntry = {\n        orderId: orderId,\n        properties: {\n          \"Event Name\": {\n            title: [{ text: { content: eventName } }]\n          },\n          \"Event Date\": {\n            date: { start: eventDate }\n          },\n          \"Platform\": {\n            select: { name: \"Humanitix\" }\n          },\n          \"Order ID\": {\n            rich_text: [{ text: { content: orderId } }]\n          },\n          \"Customer Name\": {\n            rich_text: [{ text: { content: customerName } }]\n          },\n          \"Customer Email\": {\n            email: email\n          },\n          \"Ticket Types\": {\n            rich_text: [{ text: { content: ticketTypes } }]\n          },\n          \"Quantity\": {\n            number: totalQuantity\n          },\n          \"Amount\": {\n            number: amount\n          },\n          \"Currency\": {\n            select: { name: currency }\n          },\n          \"Status\": {\n            select: { name: status }\n          },\n          \"Purchase Date\": {\n            date: { start: purchaseDate }\n          },\n          \"Venue\": {\n            rich_text: [{ text: { content: venue } }]\n          },\n          \"Last Sync\": {\n            date: { start: new Date().toISOString() }\n          },\n          \"Notes\": {\n            rich_text: [{ text: { content: \"Historical import - All time data\" } }]\n          }\n        }\n      };\n\n      // Add phone if available\n      if (phone) {\n        orderEntry.properties[\"Customer Phone\"] = {\n          phone_number: phone\n        };\n      }\n\n      transformedOrders.push(orderEntry);\n\n    } catch (e) {\n      console.log(`Error processing order ${i}:`, e.message);\n      // Skip this order and continue\n    }\n  }\n\n  console.log(`Successfully processed ${transformedOrders.length} orders`);\n  return transformedOrders.map(order => ({ json: order }));"},"id":"transform-orders","name":"Transform Orders","type":"n8n-nodes-base.code","typeVersion":2,"position":[1952,304]},{"parameters":{"resource":"databasePage","operation":"getAll","databaseId":"1374745b-8cbe-804b-87a2-ec93b3385e01","filterType":"manual","filters":{"conditions":[{"key":"Order ID|rich_text","condition":"equals","richTextValue":"={{ $json.orderId }}"}]},"options":{}},"id":"check-duplicates","name":"Check Duplicates","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2160,304],"credentials":{"notionApi":{"id":"n2TBZCnpzOxSU5Wk","name":"Notion account"}}},{"parameters":{"jsCode":"// Debug: Check what Notion returns\nconsole.log(\"=== NOTION DEBUG ===\");\nconsole.log(\"Input all length:\", $input.all().length);\nconsole.log(\"Items length:\", $items().length);\nconsole.log(\"JSON type:\", typeof $json);\nconsole.log(\"Has results property:\", $json.results ? true : false);\nif ($json.results) {\n  console.log(\"Results length:\", $json.results.length);\n}\nconsole.log(\"First input item:\", JSON.stringify($input.all()[0], null, 2));\nconsole.log(\"=== END DEBUG ===\");\n\n// Pass data through unchanged\nreturn $input.all();"},"id":"debug-notion-output","name":"Debug Notion Output","type":"n8n-nodes-base.code","typeVersion":2,"position":[2384,304]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose"},"conditions":[{"id":"check-new-fixed","leftValue":"={{ $input.all().length }}","rightValue":0,"operator":{"type":"number","operation":"equals","rightType":"number"}}],"combinator":"and"},"options":{}},"id":"if-new","name":"IF New Order","type":"n8n-nodes-base.if","typeVersion":2,"position":[2608,304]},{"parameters":{"resource":"databasePage","databaseId":"1374745b-8cbe-804b-87a2-ec93b3385e01","propertiesUi":{"propertyValues":[{"key":"Name|title","title":"={{ $json.properties.Name.title[0].text.content }}"},{"key":"Email|email","emailValue":"={{ $json.properties.Email.email }}"},{"key":"Mobile|phone_number","phoneValue":"={{ $json.properties.Mobile?.phone_number || '' }}"},{"key":"Event Name|rich_text","textContent":"={{ $json.properties['Event Name'].rich_text[0].text.content }}"},{"key":"Event ID|rich_text","textContent":"={{ $json.properties['Event ID'].rich_text[0].text.content }}"},{"key":"Event Date & Time|date","date":"={{ $json.properties['Event Date & Time'].date.start }}"},{"key":"Order ID|rich_text","textContent":"={{ $json.properties['Order ID'].rich_text[0].text.content }}"},{"key":"Total Amount|number","numberValue":"={{ $json.properties['Total Amount'].number }}"},{"key":"Quantity|number","numberValue":"={{ $json.properties.Quantity.number }}"},{"key":"Ticket Type|rich_text","textContent":"={{ $json.properties['Ticket Type'].rich_text[0].text.content }}"},{"key":"Ticketing Partner|select","selectValue":"={{ $json.properties['Ticketing Partner'].select.name }}"},{"key":"Payment Status|rich_text","textContent":"={{ $json.properties['Payment Status'].rich_text[0].text.content }}"},{"key":"Order Date|date","date":"={{ $json.properties['Order Date'].date.start }}"},{"key":"Created At|date","date":"={{ $json.properties['Created At'].date.start }}"},{"key":"Updated At|date","date":"={{ $json.properties['Updated At'].date.start }}"}]},"options":{}},"id":"create-entry","name":"Create Entry","type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[2832,272],"credentials":{"notionApi":{"id":"n2TBZCnpzOxSU5Wk","name":"Notion account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose"},"conditions":[{"id":"has-more-orders","leftValue":"={{ $json.ordersHasMore }}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"id":"if-more-orders","name":"IF More Orders","type":"n8n-nodes-base.if","typeVersion":2,"position":[3040,304]},{"parameters":{"jsCode":"// Track import progress\nconst items = $input.all();\nconst importCount = items.length;\n\nreturn [{\n  json: {\n    imported: importCount,\n    timestamp: new Date().toISOString(),\n    message: `Imported ${importCount} historical orders`\n  }\n}];"},"id":"count-imports","name":"Count Imports","type":"n8n-nodes-base.code","typeVersion":2,"position":[3264,304]}],"connections":{"Manual Trigger":{"main":[[{"node":"Set Parameters","type":"main","index":0}]]},"Set Parameters":{"main":[[{"node":"Pagination Loop","type":"main","index":0}]]},"Pagination Loop":{"main":[[{"node":"Get ALL Events","type":"main","index":0}]]},"Get ALL Events":{"main":[[{"node":"Process Events","type":"main","index":0}]]},"Process Events":{"main":[[{"node":"Orders Pagination Loop","type":"main","index":0}]]},"Orders Pagination Loop":{"main":[[{"node":"Get ALL Orders","type":"main","index":0}]]},"Get ALL Orders":{"main":[[{"node":"Process Orders Response","type":"main","index":0}]]},"Process Orders Response":{"main":[[{"node":"Transform Orders","type":"main","index":0}]]},"Transform Orders":{"main":[[{"node":"Check Duplicates","type":"main","index":0}]]},"Check Duplicates":{"main":[[{"node":"Debug Notion Output","type":"main","index":0}]]},"Debug Notion Output":{"main":[[{"node":"IF New Order","type":"main","index":0}]]},"IF New Order":{"main":[[{"node":"Create Entry","type":"main","index":0}],[]]},"Create Entry":{"main":[[{"node":"IF More Orders","type":"main","index":0}]]},"IF More Orders":{"main":[[{"node":"Orders Pagination Loop","type":"main","index":0}],[{"node":"Count Imports","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","saveDataErrorExecution":"all","saveDataSuccessExecution":"all","executionTimeout":3600},"staticData":{},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"70331de5-5a16-4cf5-b88f-c970c42f1deb","triggerCount":0,"tags":[],"shared":[{"createdAt":"2025-08-02T04:30:49.830Z","updatedAt":"2025-08-02T04:30:49.830Z","role":"workflow:owner","workflowId":"py2wq9zchBz0TD9j","projectId":"ZMikqJqmz2IcRNGF","project":{"createdAt":"2025-08-02T03:57:41.176Z","updatedAt":"2025-08-02T04:07:23.137Z","id":"ZMikqJqmz2IcRNGF","name":"Anthony Skinner <chillz@standupsydney.com>","type":"personal","icon":null,"description":null}}]}]
