[{"createdAt":"2025-08-21T11:18:29.087Z","updatedAt":"2025-08-21T20:31:33.626Z","id":"7w1BMGSjVVUtadjf","name":"Humanitix to Brevo Sync","active":true,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"minutes","value":15}]}},"id":"humanitix-cron-trigger","name":"Schedule Trigger","type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.1,"position":[280,300]},{"parameters":{"method":"GET","url":"https://api.humanitix.com/v1/events","sendQuery":true,"queryParameters":{"parameters":[{"name":"page","value":"1"},{"name":"pageSize","value":"50"},{"name":"inFutureOnly","value":"false"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"x-api-key","value":"={{ $credentials.httpHeaderAuth.headerValue }}"},{"name":"Accept","value":"application/json"}]}},"id":"fetch-humanitix-events","name":"Fetch Humanitix Events","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[500,300],"credentials":{"httpHeaderAuth":{"id":"humanitix-api-key","name":"Humanitix API Key"}}},{"parameters":{"jsCode":"const events = $input.all()[0].json.events || [];\n            const output = [];\n\n            for (const event of events) {\n              const eventDate = new Date(event.startDate);\n              const sixMonthsAgo = new Date();\n              sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6); // Increased from 30 days\n              \n              if (event.status === 'live' && eventDate > sixMonthsAgo) {\n                output.push({\n                  eventId: event._id,\n                  eventName: event.title,\n                  eventDate: event.startDate,\n                  eventLocation: event.location,\n                  venue: event.eventLocation?.venueName || 'Unknown Venue',\n                  city: event.eventLocation?.city || '',\n                  region: event.eventLocation?.region || ''\n                });\n              }\n            }\n\n            console.log(`Processing ${output.length} events for order sync (6 month range)`);\n            return output;"},"id":"process-events","name":"Process Events","type":"n8n-nodes-base.code","typeVersion":2,"position":[720,300]},{"parameters":{"method":"GET","url":"=https://api.humanitix.com/v1/events/{{ $json.eventId }}/orders","sendQuery":true,"queryParameters":{"parameters":[{"name":"page","value":"1"},{"name":"pageSize","value":"100"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"x-api-key","value":"={{ $credentials.httpHeaderAuth.headerValue }}"},{"name":"Accept","value":"application/json"}]}},"id":"fetch-event-orders","name":"Fetch Event Orders","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[940,300],"credentials":{"httpHeaderAuth":{"id":"humanitix-api-key","name":"Humanitix API Key"}}},{"parameters":{"jsCode":"const orders = $input.all()[0].json.orders || [];\nconst eventData = $input.all()[0].json;\nconst output = [];\n\nconst stateMapping = {\n  'sydney': 'NSW', 'newcastle': 'NSW', 'wollongong': 'NSW', 'nsw': 'NSW', 'new south wales': 'NSW',\n  'melbourne': 'VIC', 'geelong': 'VIC', 'ballarat': 'VIC', 'vic': 'VIC', 'victoria': 'VIC',\n  'brisbane': 'QLD', 'gold coast': 'QLD', 'sunshine coast': 'QLD', 'qld': 'QLD', 'queensland': 'QLD',\n  'perth': 'WA', 'fremantle': 'WA', 'bunbury': 'WA', 'wa': 'WA', 'western australia': 'WA',\n  'adelaide': 'SA', 'mount gambier': 'SA', 'sa': 'SA', 'south australia': 'SA',\n  'hobart': 'TAS', 'launceston': 'TAS', 'tas': 'TAS', 'tasmania': 'TAS',\n  'darwin': 'NT', 'alice springs': 'NT', 'nt': 'NT', 'northern territory': 'NT',\n  'canberra': 'ACT', 'act': 'ACT', 'australian capital territory': 'ACT'\n};\n\nfunction mapLocationToState(city, region) {\n  const normalizeText = (text) => text?.toLowerCase().trim() || '';\n  const normalizedRegion = normalizeText(region);\n  if (stateMapping[normalizedRegion]) return stateMapping[normalizedRegion];\n  const normalizedCity = normalizeText(city);\n  if (stateMapping[normalizedCity]) return stateMapping[normalizedCity];\n  for (const [location, state] of Object.entries(stateMapping)) {\n    if (normalizedCity.includes(location) || normalizedRegion.includes(location)) {\n      return state;\n    }\n  }\n  return 'Unknown';\n}\n\nconst customerState = mapLocationToState(eventData.city, eventData.region);\n\nfor (const order of orders) {\n  if (order.status === 'paid' && order.customer?.email) {\n    output.push({\n      email: order.customer.email,\n      firstName: order.customer.firstName || '',\n      lastName: order.customer.lastName || '',\n      state: customerState,\n      eventName: eventData.eventName,\n      eventDate: eventData.eventDate,\n      venue: eventData.venue,\n      platform: 'Humanitix',\n      orderTotal: order.totals?.total || 0,\n      ticketQuantity: order.tickets?.reduce((sum, ticket) => sum + (ticket.quantity || 0), 0) || 1,\n      marketingOptIn: order.customer.organiserMailListOptIn || false,\n      orderDate: order.createdAt,\n      listIds: [3]\n    });\n  }\n}\n\nconsole.log(`Found ${output.length} customers to sync to Brevo`);\nreturn output;"},"id":"process-orders","name":"Process Orders for Brevo","type":"n8n-nodes-base.code","typeVersion":2,"position":[1160,300]},{"parameters":{"method":"POST","url":"https://api.brevo.com/v3/contacts","sendHeaders":true,"headerParameters":{"parameters":[{"name":"api-key","value":"={{ $env.BREVO_API_KEY }}"},{"name":"Content-Type","value":"application/json"},{"name":"Accept","value":"application/json"}]},"sendBody":true,"bodyContentType":"json","jsonBody":"={{ JSON.stringify({\n  email: $json.email,\n  attributes: {\n    FIRSTNAME: $json.firstName,\n    LASTNAME: $json.lastName,\n    STATE: $json.state,\n    LAST_EVENT: $json.eventName,\n    LAST_EVENT_DATE: $json.eventDate,\n    VENUE: $json.venue,\n    PLATFORM: $json.platform,\n    ORDER_TOTAL: $json.orderTotal,\n    TICKET_QUANTITY: $json.ticketQuantity,\n    MARKETING_OPT_IN: $json.marketingOptIn\n  },\n  listIds: $json.listIds,\n  updateEnabled: true\n}) }}","options":{"response":{"response":{"neverError":true}}}},"id":"sync-to-brevo","name":"Sync to Brevo","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[1380,300]},{"parameters":{"jsCode":"const results = $input.all();\nlet successCount = 0;\nlet errorCount = 0;\nconst errors = [];\n\nfor (const result of results) {\n  if (result.json.statusCode && result.json.statusCode >= 400) {\n    errorCount++;\n    errors.push({\n      email: result.json.email || 'unknown',\n      error: result.json.message || 'Unknown error',\n      statusCode: result.json.statusCode\n    });\n  } else {\n    successCount++;\n  }\n}\n\nconst summary = {\n  timestamp: new Date().toISOString(),\n  platform: 'Humanitix',\n  totalProcessed: results.length,\n  successCount,\n  errorCount,\n  errors: errors.slice(0, 10),\n  status: errorCount === 0 ? 'success' : errorCount < results.length / 2 ? 'partial_success' : 'failed'\n};\n\nconsole.log('Humanitix to Brevo Sync Summary:', JSON.stringify(summary, null, 2));\n\nreturn [summary];"},"id":"log-results","name":"Log Sync Results","type":"n8n-nodes-base.code","typeVersion":2,"position":[1600,300]}],"connections":{"Schedule Trigger":{"main":[[{"node":"Fetch Humanitix Events","type":"main","index":0}]]},"Fetch Humanitix Events":{"main":[[{"node":"Process Events","type":"main","index":0}]]},"Process Events":{"main":[[{"node":"Fetch Event Orders","type":"main","index":0}]]},"Fetch Event Orders":{"main":[[{"node":"Process Orders for Brevo","type":"main","index":0}]]},"Process Orders for Brevo":{"main":[[{"node":"Sync to Brevo","type":"main","index":0}]]},"Sync to Brevo":{"main":[[{"node":"Log Sync Results","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]}},"meta":{"instanceId":"e3a1c1c4e2a4f1b2c3d4e5f6a7b8c9d0"},"pinData":{},"versionId":"3b95bf21-7212-4174-8db6-32eabc0ab551","triggerCount":1,"tags":[],"shared":[{"createdAt":"2025-08-21T11:18:29.094Z","updatedAt":"2025-08-21T11:18:29.094Z","role":"workflow:owner","workflowId":"7w1BMGSjVVUtadjf","projectId":"ZMikqJqmz2IcRNGF","project":{"createdAt":"2025-08-02T03:57:41.176Z","updatedAt":"2025-08-02T04:07:23.137Z","id":"ZMikqJqmz2IcRNGF","name":"Anthony Skinner <chillz@standupsydney.com>","type":"personal","icon":null,"description":null}}]}]