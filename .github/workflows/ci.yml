name: CI

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev]

jobs:
  lint-and-typecheck:
    name: Lint and Typecheck
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npx tsc --noEmit

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run Jest tests
        run: npm run test -- --ci --coverage --maxWorkers=2
        env:
          CI: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build production bundle
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 7

  migration-check:
    name: Migration Safety Check
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for comparison

      - name: Check for new migrations
        id: check_migrations
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)

          # Check if any migration files changed
          if echo "$CHANGED_FILES" | grep -q "supabase/migrations/"; then
            echo "has_migrations=true" >> $GITHUB_OUTPUT
            echo "::warning::This PR includes database migrations. Ensure they've been tested locally."
          else
            echo "has_migrations=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for destructive operations
        if: steps.check_migrations.outputs.has_migrations == 'true'
        run: |
          # Get changed migration files
          MIGRATION_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "supabase/migrations/" || true)

          if [ -z "$MIGRATION_FILES" ]; then
            echo "No migration files to check"
            exit 0
          fi

          # Check each migration for destructive patterns
          DESTRUCTIVE=false
          for file in $MIGRATION_FILES; do
            if [ -f "$file" ]; then
              echo "Checking $file for destructive operations..."

              # Check for DROP TABLE, DROP COLUMN, TRUNCATE
              if grep -Ei '\b(DROP\s+(TABLE|COLUMN)|TRUNCATE)\b' "$file" | grep -v '-- ALLOW_DROP'; then
                echo "::error::Destructive operation found in $file without ALLOW_DROP comment"
                DESTRUCTIVE=true
              fi
            fi
          done

          if [ "$DESTRUCTIVE" = true ]; then
            echo "::error::Destructive migrations detected. Add '-- ALLOW_DROP' comment if intentional."
            exit 1
          fi

          echo "✅ No destructive operations detected"

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, migration-check]
    if: always()

    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.migration-check.result }}" != "success" && "${{ needs.migration-check.result }}" != "skipped" ]]; then
            echo "::error::One or more checks failed"
            exit 1
          fi

          echo "✅ All checks passed!"
