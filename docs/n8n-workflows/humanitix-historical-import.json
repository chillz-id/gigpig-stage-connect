{
  "name": "Humanitix Historical Data Import",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Set date range for historical import\n// Default to last 30 days, can be modified as needed\nconst endDate = new Date();\nconst startDate = new Date();\nstartDate.setDate(endDate.getDate() - 30);\n\n// You can customize these dates:\n// startDate.setMonth(startDate.getMonth() - 3); // Last 3 months\n// startDate.setFullYear(2024, 0, 1); // From Jan 1, 2024\n\nreturn [{\n  json: {\n    startDate: startDate.toISOString(),\n    endDate: endDate.toISOString(),\n    message: `Importing data from ${startDate.toDateString()} to ${endDate.toDateString()}`\n  }\n}];"
      },
      "id": "set-date-range",
      "name": "Set Date Range",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "https://api.humanitix.com/v1/events",
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "X-API-Key",
          "value": "{{ $env.HUMANITIX_API_KEY }}"
        },
        "options": {
          "qs": {
            "page": "1",
            "created_after": "={{ $json.startDate }}",
            "created_before": "={{ $json.endDate }}"
          }
        }
      },
      "id": "get-historical-events",
      "name": "Get Historical Events",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "split-events",
      "name": "Split Events",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "=https://api.humanitix.com/v1/events/{{ $json.id }}/orders",
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "X-API-Key",
          "value": "{{ $env.HUMANITIX_API_KEY }}"
        },
        "options": {
          "qs": {
            "page": "1",
            "status": "all",
            "created_after": "={{ $node['Set Date Range'].json.startDate }}",
            "created_before": "={{ $node['Set Date Range'].json.endDate }}"
          }
        }
      },
      "id": "get-historical-orders",
      "name": "Get Historical Orders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Transform historical order data to Notion format\n// Same transformation logic as the main sync workflow\nconst orders = $input.all();\nconst transformedOrders = [];\n\nfor (const orderBatch of orders) {\n  if (orderBatch.json.data && orderBatch.json.data.length > 0) {\n    for (const order of orderBatch.json.data) {\n      const ticketTypes = order.tickets?.map(t => t.ticketType?.name || 'General').join(', ') || 'General';\n      const totalQuantity = order.tickets?.reduce((sum, t) => sum + (t.quantity || 1), 0) || 1;\n      \n      transformedOrders.push({\n        orderId: order.id,\n        properties: {\n          \"Event Name\": {\n            title: [{ text: { content: order.event?.name || 'Unknown Event' } }]\n          },\n          \"Event Date\": order.event?.startDate ? {\n            date: { start: order.event.startDate }\n          } : null,\n          \"Platform\": {\n            select: { name: \"Humanitix\" }\n          },\n          \"Order ID\": {\n            rich_text: [{ text: { content: order.id || 'N/A' } }]\n          },\n          \"Customer Name\": {\n            rich_text: [{ text: { content: `${order.firstName || ''} ${order.lastName || ''}`.trim() || 'N/A' } }]\n          },\n          \"Customer Email\": order.email ? {\n            email: order.email\n          } : null,\n          \"Customer Phone\": order.phone ? {\n            phone_number: order.phone\n          } : null,\n          \"Ticket Types\": {\n            rich_text: [{ text: { content: ticketTypes } }]\n          },\n          \"Quantity\": {\n            number: totalQuantity\n          },\n          \"Amount\": {\n            number: parseFloat(order.total || 0)\n          },\n          \"Currency\": {\n            select: { name: order.currency || \"AUD\" }\n          },\n          \"Status\": {\n            select: { name: order.status || \"unknown\" }\n          },\n          \"Purchase Date\": order.createdAt ? {\n            date: { start: order.createdAt }\n          } : null,\n          \"Venue\": {\n            rich_text: [{ text: { content: order.event?.venue?.name || 'TBD' } }]\n          },\n          \"Last Sync\": {\n            date: { start: new Date().toISOString() }\n          },\n          \"Raw Data\": {\n            rich_text: [{ text: { content: `[HISTORICAL] ${JSON.stringify(order, null, 2).substring(0, 1900)}` } }]\n          }\n        }\n      });\n    }\n  }\n}\n\nreturn transformedOrders.map(order => ({ json: order }));"
      },
      "id": "transform-historical-data",
      "name": "Transform Historical Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "batchSize": 10,
        "options": {}
      },
      "id": "batch-for-notion",
      "name": "Batch for Notion",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "databaseId": "={{ $env.NOTION_DATABASE_ID }}",
        "filterType": "manual",
        "matchType": "anyFilter",
        "filters": {
          "conditions": [
            {
              "key": "Order ID",
              "condition": "rich_text",
              "operation": "equals",
              "value": "={{ $json.orderId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "check-historical-duplicates",
      "name": "Check Historical Duplicates",
      "type": "@notionhq/notion-mcp-server.queryDatabase",
      "typeVersion": 1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "historical-check",
              "leftValue": "={{ $json.results.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-new-historical-order",
      "name": "IF New Historical Order",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "databaseId": "={{ $env.NOTION_DATABASE_ID }}",
        "properties": "={{ $json.properties }}"
      },
      "id": "create-historical-entry",
      "name": "Create Historical Entry",
      "type": "@notionhq/notion-mcp-server.createDatabaseItem",
      "typeVersion": 1,
      "position": [2220, 260]
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "seconds"
      },
      "id": "rate-limit-delay",
      "name": "Rate Limit Delay",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [2440, 260]
    },
    {
      "parameters": {
        "jsCode": "// Count imported records\nconst imported = $input.all().length;\nconst total = $node['Transform Historical Data'].json.length || 0;\n\nreturn [{\n  json: {\n    imported,\n    total,\n    skipped: total - imported,\n    message: `Historical import completed: ${imported}/${total} records imported`\n  }\n}];"
      },
      "id": "import-summary",
      "name": "Import Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2660, 300]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Set Date Range",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Date Range": {
      "main": [
        [
          {
            "node": "Get Historical Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Historical Events": {
      "main": [
        [
          {
            "node": "Split Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Events": {
      "main": [
        [
          {
            "node": "Get Historical Orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Historical Orders": {
      "main": [
        [
          {
            "node": "Transform Historical Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Historical Data": {
      "main": [
        [
          {
            "node": "Batch for Notion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch for Notion": {
      "main": [
        [
          {
            "node": "Check Historical Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Historical Duplicates": {
      "main": [
        [
          {
            "node": "IF New Historical Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF New Historical Order": {
      "main": [
        [
          {
            "node": "Create Historical Entry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Historical Entry": {
      "main": [
        [
          {
            "node": "Rate Limit Delay",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rate Limit Delay": {
      "main": [
        [
          {
            "node": "Import Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "tags": [
    {
      "id": "tag1",
      "name": "humanitix"
    },
    {
      "id": "tag2",
      "name": "historical-import"
    },
    {
      "id": "tag3",
      "name": "one-time"
    }
  ],
  "triggerCount": 1,
  "versionId": "1"
}