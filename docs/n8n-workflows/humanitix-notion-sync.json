{
  "name": "Humanitix to Notion Sync",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 15
            }
          ]
        }
      },
      "id": "1a2b3c4d-5e6f-7890-abcd-ef1234567890",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://api.humanitix.com/v1/events",
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "X-API-Key",
          "value": "{{ $env.HUMANITIX_API_KEY }}"
        },
        "options": {
          "qs": {
            "status": "published",
            "page": "1"
          }
        }
      },
      "id": "2b3c4d5e-6f78-90ab-cdef-123456789012",
      "name": "Get Events",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "3c4d5e6f-7890-abcd-ef12-34567890abcd",
      "name": "Split Events",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://api.humanitix.com/v1/events/{{ $json.id }}/orders",
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "X-API-Key",
          "value": "{{ $env.HUMANITIX_API_KEY }}"
        },
        "options": {
          "qs": {
            "page": "1",
            "status": "all",
            "updated_since": "={{ $node['Get Last Sync Time'].json.timestamp || '2024-01-01T00:00:00Z' }}"
          }
        }
      },
      "id": "4d5e6f70-890a-bcde-f123-456789012345",
      "name": "Get Orders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Transform Humanitix order data to Notion format\nconst orders = $input.all();\nconst transformedOrders = [];\n\nfor (const orderBatch of orders) {\n  if (orderBatch.json.data && orderBatch.json.data.length > 0) {\n    for (const order of orderBatch.json.data) {\n      // Extract ticket types and total quantity\n      const ticketTypes = order.tickets?.map(t => t.ticketType?.name || 'General').join(', ') || 'General';\n      const totalQuantity = order.tickets?.reduce((sum, t) => sum + (t.quantity || 1), 0) || 1;\n      \n      transformedOrders.push({\n        eventId: order.eventId,\n        orderId: order.id,\n        properties: {\n          \"Event Name\": {\n            title: [{ text: { content: order.event?.name || 'Unknown Event' } }]\n          },\n          \"Event Date\": order.event?.startDate ? {\n            date: { start: order.event.startDate }\n          } : null,\n          \"Platform\": {\n            select: { name: \"Humanitix\" }\n          },\n          \"Order ID\": {\n            rich_text: [{ text: { content: order.id || 'N/A' } }]\n          },\n          \"Customer Name\": {\n            rich_text: [{ text: { content: `${order.firstName || ''} ${order.lastName || ''}`.trim() || 'N/A' } }]\n          },\n          \"Customer Email\": order.email ? {\n            email: order.email\n          } : null,\n          \"Customer Phone\": order.phone ? {\n            phone_number: order.phone\n          } : null,\n          \"Ticket Types\": {\n            rich_text: [{ text: { content: ticketTypes } }]\n          },\n          \"Quantity\": {\n            number: totalQuantity\n          },\n          \"Amount\": {\n            number: parseFloat(order.total || 0)\n          },\n          \"Currency\": {\n            select: { name: order.currency || \"AUD\" }\n          },\n          \"Status\": {\n            select: { name: order.status || \"unknown\" }\n          },\n          \"Purchase Date\": order.createdAt ? {\n            date: { start: order.createdAt }\n          } : null,\n          \"Venue\": {\n            rich_text: [{ text: { content: order.event?.venue?.name || 'TBD' } }]\n          },\n          \"Last Sync\": {\n            date: { start: new Date().toISOString() }\n          },\n          \"Raw Data\": {\n            rich_text: [{ text: { content: JSON.stringify(order, null, 2).substring(0, 2000) } }]\n          }\n        }\n      });\n    }\n  }\n}\n\nreturn transformedOrders.map(order => ({ json: order }));"
      },
      "id": "5e6f7089-0abc-def1-2345-6789012345ab",
      "name": "Transform Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "databaseId": "={{ $env.NOTION_DATABASE_ID }}",
        "filterType": "manual",
        "matchType": "anyFilter",
        "filters": {
          "conditions": [
            {
              "key": "Order ID",
              "condition": "rich_text",
              "operation": "equals",
              "value": "={{ $json.orderId }}"
            }
          ]
        },
        "options": {}
      },
      "id": "6f708901-abcd-ef12-3456-789012345abc",
      "name": "Check for Duplicates",
      "type": "@notionhq/notion-mcp-server.queryDatabase",
      "typeVersion": 1,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1234567890abcdef",
              "leftValue": "={{ $json.results.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals",
                "rightType": "number"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "78901abc-def1-2345-6789-012345abcdef",
      "name": "IF New Order",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "databaseId": "={{ $env.NOTION_DATABASE_ID }}",
        "properties": "={{ $json.properties }}"
      },
      "id": "8901abcd-ef12-3456-7890-12345abcdef0",
      "name": "Create Notion Entry",
      "type": "@notionhq/notion-mcp-server.createDatabaseItem",
      "typeVersion": 1,
      "position": [
        1780,
        260
      ]
    },
    {
      "parameters": {
        "jsCode": "// Store the current timestamp for next sync\nconst timestamp = new Date().toISOString();\n\n// In a real implementation, this would be stored in a database or persistent storage\n// For now, we'll return it to be used by the workflow\nreturn [{\n  json: {\n    timestamp: timestamp,\n    message: `Sync completed at ${timestamp}`,\n    ordersProcessed: $input.all().length\n  }\n}];"
      },
      "id": "901abcde-f123-4567-8901-2345abcdef01",
      "name": "Update Sync Time",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        300
      ]
    },
    {
      "parameters": {
        "content": "üìä *Humanitix Sync Complete*\\n\\nProcessed: {{ $json.ordersProcessed }} orders\\nLast sync: {{ $json.timestamp }}\\nStatus: ‚úÖ Success",
        "options": {}
      },
      "id": "01abcdef-1234-5678-9012-345abcdef012",
      "name": "Success Notification",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2220,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get last sync timestamp from static data or default\n// In production, this should read from a persistent storage\nconst defaultTimestamp = '2024-01-01T00:00:00Z';\nconst lastSync = $workflow.staticData.lastSyncTimestamp || defaultTimestamp;\n\nreturn [{\n  json: {\n    timestamp: lastSync\n  }\n}];"
      },
      "id": "1abcdef0-2345-6789-0123-45abcdef0123",
      "name": "Get Last Sync Time",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {
        "content": "‚ùå *Humanitix Sync Error*\\n\\nError: {{ $json.error.message }}\\nTime: {{ new Date().toISOString() }}\\nWorkflow: Humanitix to Notion Sync",
        "options": {}
      },
      "id": "abcdef01-2345-6789-0123-45abcdef0123",
      "name": "Error Notification",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1780,
        400
      ]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Events",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Last Sync Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Events": {
      "main": [
        [
          {
            "node": "Split Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Events": {
      "main": [
        [
          {
            "node": "Get Orders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Orders": {
      "main": [
        [
          {
            "node": "Transform Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Data": {
      "main": [
        [
          {
            "node": "Check for Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Duplicates": {
      "main": [
        [
          {
            "node": "IF New Order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF New Order": {
      "main": [
        [
          {
            "node": "Create Notion Entry",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Notion Entry": {
      "main": [
        [
          {
            "node": "Update Sync Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Sync Time": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "lastSyncTimestamp": "2024-01-01T00:00:00Z"
  },
  "tags": [
    {
      "createdAt": "2025-01-13T10:30:00.000Z",
      "updatedAt": "2025-01-13T10:30:00.000Z",
      "id": "tag1",
      "name": "humanitix"
    },
    {
      "createdAt": "2025-01-13T10:30:00.000Z",
      "updatedAt": "2025-01-13T10:30:00.000Z",
      "id": "tag2", 
      "name": "notion"
    },
    {
      "createdAt": "2025-01-13T10:30:00.000Z",
      "updatedAt": "2025-01-13T10:30:00.000Z",
      "id": "tag3",
      "name": "ticket-sales"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-01-13T10:30:00.000Z",
  "versionId": "1"
}