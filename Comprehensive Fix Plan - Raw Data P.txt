  Comprehensive Fix Plan - Raw Data Preservation & Complete API Mapping

     1. Master Data Sync Architecture

     - Create unified n8n workflow preserving ALL raw API data
     - NO conversions - keep original timezones, currencies, formats
     - Store everything exactly as received from Humanitix API

     2. EVENTS Database - Complete API Mapping

        Endpoint: GET https://api.humanitix.com/v1/events

        ALL Fields to Map:
     - event_id, location, currency (raw - no conversion)
     - name, description, slug
     - user_id, organiser_id, tag_ids
     - classification_type, classification_category, classification_subcategory
     - public, published, suspend_sales, marked_sold_out
     - start_date, end_date, timezone (preserve original)
     - dates[] array (all session dates)
     - total_capacity
     - event_location_type, venue_name, address, lat_lng
     - address_components[], place_id, city, region, country
     - ticket_types[] (full pricing structure)
     - packaged_tickets[] (group pricing)
     - additional_questions[]
     - banner_image_url, map_url
     - payment_options, refund_policy
     - accessibility, affiliate_codes
     - pricing_minimum_price, pricing_maximum_price
     - keywords[], artists[]
     - created_at, updated_at, published_at
     - url (Humanitix event URL)

     3. SESSIONS Database - Multi-Date Parsing

        Parse from: Event dates[] array

        Fields per Session:
     - session_id (from _id in dates array)
     - parent_event_id
     - startDate, endDate (raw timestamps)
     - timezone (preserve original)
     - scheduleId (for recurring events)
     - disabled, deleted flags
     - venue_id (relation to Venues DB)
     - capacity per session

     4. ORDERS Database - Complete Financial Mapping

        Endpoint: GET https://api.humanitix.com/v1/events/{eventId}/orders

        ALL Financial Fields:
     - order_id, order_reference
     - event_id, event_date_id
     - customer_first_name, customer_last_name, customer_email
     - currency (raw - AUD/USD/etc)
     - subtotal, total, gross_sales, net_sales
     - Fees Breakdown:
       - booking_fee, humanitix_fee, passed_on_fee
       - absorbed_fee, amex_fee, zip_fee
       - total_fees, tip_fees
     - Tax Details:
       - taxes, booking_taxes, total_taxes, passed_on_taxes
       - business_tax_id, business_name, business_purpose
     - Discounts:
       - discounts, discount_code, discount_code_amount
       - auto_discount_amount, referral_amount
     - Donations:
       - donation, client_donation, net_client_donation
       - dgr_donation
     - Credits & Refunds:
       - credit, gift_card_credit
       - refunds, outstanding_amount
     - payment_gateway, payment_type
     - financial_status (free/paid/partiallyRefunded/refunded)
     - order_status, status
     - sales_channel (online/manual)
     - is_international_transaction
     - created_date, completed_at, updated_at, incomplete_at
     - manual_order flag
     - fees_included flag
     - organiser_mail_list_opt_in
     - location_code, access_code
     - waitlist_offer_id
     - quantity (total tickets in order)
     - additional_fields (custom data)
     - notes

     5. TICKETS Database - Individual Ticket Details

        Parse from: Order tickets[] array within each order

        ALL Ticket Fields:
     - ticket_id, qr_code_id, barcode
     - order_id (parent order)
     - event_id, event_date_id
     - Attendee Information:
       - first_name, last_name
       - attendee_first_name, attendee_last_name
       - attendee_email, attendee_profile_id
       - organisation
     - Ticket Type & Pricing:
       - ticket_type_id, ticket_type_name
       - ticket_type, ticket_name
       - price, ticket_price, net_price
       - fee, passed_on_fee, absorbed_fee
       - taxes, total
     - Discounts Applied:
       - discount, discount_code
       - discount_code_amount, auto_discount_amount
     - Package Information:
       - package_id, package_name, package_price
       - package_group_id
     - Check-in Details:
       - check_in_status (not_checked_in/checked_in)
       - check_in_date, check_in_user_id
       - check_in_checked_in (boolean)
       - check_in_history
       - custom_scanning_code
     - Seating Information:
       - seating_map_id, seating_section
       - seating_table, seating_seat
       - seating_name, seating_note
     - Status & Metadata:
       - ticket_status (valid/refunded/cancelled)
       - status (complete/cancelled)
       - cancelled_at
       - is_donation flag
       - sales_channel
       - location_code, access_code
     - Swap Information:
       - swapped_from, swapped_to
     - currency (preserve original)
     - created_date, updated_at
     - additional_fields

     6. Implementation Workflow Structure

     // N8N Workflow Components:

     1. Schedule Trigger (15 min intervals)
     2. Get All Events (pagination support)
     3. For Each Event:
        - Store raw event data → Events DB
        - Parse dates[] → Sessions DB
        - Get Orders for Event (pagination)
        - For Each Order:
          - Store raw order → Orders DB  
          - Extract tickets[] → Tickets DB
     4. Error Handling & Retry Logic
     5. Monitoring & Alerts

     7. Critical Implementation Notes

     - NO DATA CONVERSIONS - Store currencies as-is (AUD, USD, etc)
     - NO TIMEZONE CHANGES - Keep original timezone strings
     - PRESERVE NULL VALUES - Don't skip empty fields
     - STORE RAW ARRAYS - Keep JSON arrays as text for complex fields
     - MAINTAIN RELATIONS - Link tickets→orders→events→sessions→venues
     - DUPLICATE PREVENTION - Use unique IDs to prevent duplicates
     - HANDLE PAGINATION - Events and Orders APIs paginate at 100 items

     8. Additional API Endpoints to Include

     - Attendee Updates: PATCH /v1/events/{eventId}/attendees/{attendeeId}
     - Refund Processing: POST /v1/orders/{orderId}/refund
     - Check-in Updates: POST /v1/tickets/{ticketId}/checkin
     - Waitlist Management: GET /v1/events/{eventId}/waitlist
     - Discount Codes: GET /v1/events/{eventId}/discounts

     This ensures COMPLETE data capture with ALL financial information, preserving original formats without any conversions.