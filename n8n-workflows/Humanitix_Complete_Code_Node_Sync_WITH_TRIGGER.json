{
  "name": "Humanitix Complete Code Node Sync with Trigger",
  "nodes": [
    {
      "parameters": {},
      "id": "0a1b2c3d-4e5f-6789-abcd-ef1234567890",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        120,
        240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Complete Humanitix to Supabase sync using axios\nconst axios = require('axios');\nconst HUMANITIX_API_KEY = 'htx_ot4Ps1kNJIz8FhSfW7y8NKAVrC2AiZI8DQKs5Vvt';\nconst SUPABASE_URL = 'https://pdikjpfulhhpqpxzpgtu.supabase.co';\nconst SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBkaWtqcGZ1bGhocHFweHpwZ3R1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNTYxNTY3OCwiZXhwIjoyMDUxMTkxNjc4fQ.vqHJcZHjQO2d37qiJF2aYzOUj1mlBt5FlJ5U3bqe_bE';\n\nconst results = {\n  events: { processed: 0, skipped: 0, errors: 0 },\n  sessions: { processed: 0, skipped: 0, errors: 0 },\n  orders: { processed: 0, skipped: 0, errors: 0 },\n  tickets: { processed: 0, skipped: 0, errors: 0 }\n};\n\n// Helper function to check if record exists\nasync function checkExists(table, sourceId) {\n  try {\n    const response = await axios.get(`${SUPABASE_URL}/rest/v1/${table}?source_id=eq.${sourceId}&select=source_id`, {\n      headers: {\n        'apikey': SUPABASE_KEY,\n        'Authorization': `Bearer ${SUPABASE_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data.length > 0;\n  } catch (error) {\n    console.error(`Error checking existence for ${table}:`, error.message);\n    return false;\n  }\n}\n\n// Helper function to insert records\nasync function insertRecords(table, records) {\n  if (records.length === 0) return;\n  \n  try {\n    const response = await axios.post(`${SUPABASE_URL}/rest/v1/${table}`, records, {\n      headers: {\n        'apikey': SUPABASE_KEY,\n        'Authorization': `Bearer ${SUPABASE_KEY}`,\n        'Content-Type': 'application/json',\n        'Prefer': 'return=minimal'\n      }\n    });\n    console.log(`Inserted ${records.length} records into ${table}`);\n  } catch (error) {\n    console.error(`Failed to insert ${table}:`, error.response?.data || error.message);\n    throw error;\n  }\n}\n\n// Fetch Events\nconsole.log('Fetching events...');\nconst eventsResponse = await axios.get('https://api.humanitix.com/v1/events?page=1&pageSize=100', {\n  headers: { 'X-API-Key': HUMANITIX_API_KEY }\n});\nconst eventsData = eventsResponse.data;\n\nconst eventsToInsert = [];\nconst sessionsToInsert = [];\n\nfor (const event of eventsData.events) {\n  try {\n    // Check if event exists\n    if (await checkExists('events_htx', event._id)) {\n      results.events.skipped++;\n      continue;\n    }\n    \n    // Prepare event record\n    eventsToInsert.push({\n      source: 'humanitix',\n      source_id: event._id,\n      name: event.name,\n      description: event.description,\n      start_date: event.startDate,\n      end_date: event.endDate,\n      timezone: event.timezone,\n      status: event.status,\n      location: event.location,\n      currency: event.currency,\n      raw: event,\n      ingested_at: new Date().toISOString()\n    });\n    \n    // Process sessions (event dates)\n    if (event.dates && Array.isArray(event.dates)) {\n      for (const session of event.dates) {\n        if (!(await checkExists('sessions_htx', session._id))) {\n          sessionsToInsert.push({\n            source: 'humanitix',\n            source_id: session._id,\n            event_source_id: event._id,\n            start_date: session.startDate,\n            end_date: session.endDate,\n            timezone: session.timezone,\n            status: session.status,\n            raw: session,\n            ingested_at: new Date().toISOString()\n          });\n        }\n      }\n    }\n    \n    results.events.processed++;\n  } catch (error) {\n    console.error(`Error processing event ${event._id}:`, error);\n    results.events.errors++;\n  }\n}\n\n// Insert events and sessions\nif (eventsToInsert.length > 0) {\n  await insertRecords('events_htx', eventsToInsert);\n}\nif (sessionsToInsert.length > 0) {\n  await insertRecords('sessions_htx', sessionsToInsert);\n  results.sessions.processed = sessionsToInsert.length;\n}\n\n// Process Orders and Tickets for each event\nfor (const event of eventsData.events) {\n  console.log(`Processing orders for event: ${event.name}`);\n  \n  try {\n    const ordersResponse = await axios.get(`https://api.humanitix.com/v1/events/${event._id}/orders?page=1&pageSize=100`, {\n      headers: { 'X-API-Key': HUMANITIX_API_KEY }\n    });\n    const ordersData = ordersResponse.data;\n    \n    const ordersToInsert = [];\n    const ticketsToInsert = [];\n    \n    if (ordersData.orders) {\n      for (const order of ordersData.orders) {\n        try {\n          // Check if order exists\n          if (await checkExists('orders_htx', order._id)) {\n            results.orders.skipped++;\n            continue;\n          }\n          \n          // Prepare order record with all fields\n          const orderRecord = {\n            source: 'humanitix',\n            source_id: order._id,\n            event_source_id: event._id,\n            session_source_id: order.eventDateId,\n            event_date_id: order.eventDateId,\n            order_reference: order._id,\n            status: order.status,\n            financial_status: order.financialStatus,\n            user_id: order.userId,\n            currency: order.currency,\n            manual_order: order.manualOrder,\n            is_international_transaction: order.isInternationalTransaction,\n            \n            // Customer info\n            first_name: order.firstName,\n            last_name: order.lastName,\n            purchaser_email: order.email,\n            purchaser_name: `${order.firstName || ''} ${order.lastName || ''}`.trim(),\n            mobile: order.mobile,\n            organisation: order.organisation,\n            \n            // Business info\n            business_purpose: order.businessPurpose,\n            business_tax_id: order.businessTaxId,\n            business_name: order.businessName,\n            \n            // Payment info\n            payment_type: order.paymentType,\n            payment_gateway: order.paymentGateway,\n            tip_fees: order.tipFees,\n            \n            // Access and preferences\n            access_code: order.accessCode,\n            organiser_mail_list_opt_in: order.organiserMailListOptIn,\n            waitlist_offer_id: order.waitlistOfferId,\n            \n            // Discount info\n            discount_code_used: order.discounts?.[0]?.code,\n            discounts: order.discounts,\n            \n            // Financial totals (convert to cents)\n            total_cents: order.totals?.total ? Math.round(order.totals.total * 100) : null,\n            net_sales_cents: order.totals?.netSales ? Math.round(order.totals.netSales * 100) : null,\n            gross_sales_cents: order.totals?.grossSales ? Math.round(order.totals.grossSales * 100) : null,\n            subtotal_cents: order.totals?.subtotal ? Math.round(order.totals.subtotal * 100) : null,\n            tax_cents: order.totals?.totalTaxes ? Math.round(order.totals.totalTaxes * 100) : null,\n            taxes_cents: order.totals?.totalTaxes ? Math.round(order.totals.totalTaxes * 100) : null,\n            discount_cents: order.totals?.discounts ? Math.round(order.totals.discounts * 100) : null,\n            \n            // Detailed fees\n            humanitix_fee_cents: order.totals?.humanitixFee ? Math.round(order.totals.humanitixFee * 100) : null,\n            booking_fee_cents: order.totals?.bookingFee ? Math.round(order.totals.bookingFee * 100) : null,\n            passed_on_fee_cents: order.totals?.passedOnFee ? Math.round(order.totals.passedOnFee * 100) : null,\n            amex_fee_cents: order.totals?.amexFee ? Math.round(order.totals.amexFee * 100) : null,\n            zip_fee_cents: order.totals?.zipFee ? Math.round(order.totals.zipFee * 100) : null,\n            fees_cents: order.totals?.bookingFee ? Math.round(order.totals.bookingFee * 100) : null,\n            \n            // Tax breakdown\n            booking_taxes_cents: order.totals?.bookingTaxes ? Math.round(order.totals.bookingTaxes * 100) : null,\n            passed_on_taxes_cents: order.totals?.passedOnTaxes ? Math.round(order.totals.passedOnTaxes * 100) : null,\n            total_taxes_cents: order.totals?.totalTaxes ? Math.round(order.totals.totalTaxes * 100) : null,\n            \n            // Donations\n            client_donation_cents: order.clientDonation ? Math.round(order.clientDonation * 100) : null,\n            order_client_donation_cents: order.totals?.clientDonation ? Math.round(order.totals.clientDonation * 100) : null,\n            net_client_donation_cents: order.totals?.netClientDonation ? Math.round(order.totals.netClientDonation * 100) : null,\n            donation_cents: order.totals?.donation ? Math.round(order.totals.donation * 100) : null,\n            dgr_donation_cents: order.totals?.dgrDonation ? Math.round(order.totals.dgrDonation * 100) : null,\n            \n            // Credits and other financial\n            gift_card_credit_cents: order.totals?.giftCardCredit ? Math.round(order.totals.giftCardCredit * 100) : null,\n            credit_cents: order.totals?.credit ? Math.round(order.totals.credit * 100) : null,\n            discounts_cents: order.totals?.discounts ? Math.round(order.totals.discounts * 100) : null,\n            refunds_cents: order.totals?.refunds ? Math.round(order.totals.refunds * 100) : null,\n            referral_amount_cents: order.totals?.referralAmount ? Math.round(order.totals.referralAmount * 100) : null,\n            outstanding_amount_cents: order.totals?.outstandingAmount ? Math.round(order.totals.outstandingAmount * 100) : null,\n            \n            // Purchase totals\n            purchase_total_cents: order.purchaseTotals?.total ? Math.round(order.purchaseTotals.total * 100) : null,\n            purchase_subtotal_cents: order.purchaseTotals?.subtotal ? Math.round(order.purchaseTotals.subtotal * 100) : null,\n            purchase_net_sales_cents: order.purchaseTotals?.netSales ? Math.round(order.purchaseTotals.netSales * 100) : null,\n            purchase_gross_sales_cents: order.purchaseTotals?.grossSales ? Math.round(order.purchaseTotals.grossSales * 100) : null,\n            purchase_humanitix_fee_cents: order.purchaseTotals?.humanitixFee ? Math.round(order.purchaseTotals.humanitixFee * 100) : null,\n            purchase_booking_fee_cents: order.purchaseTotals?.bookingFee ? Math.round(order.purchaseTotals.bookingFee * 100) : null,\n            purchase_discounts_cents: order.purchaseTotals?.discounts ? Math.round(order.purchaseTotals.discounts * 100) : null,\n            purchase_refunds_cents: order.purchaseTotals?.refunds ? Math.round(order.purchaseTotals.refunds * 100) : null,\n            \n            // Boolean flags\n            fees_included: order.totals?.feesIncluded,\n            purchase_fees_included: order.purchaseTotals?.feesIncluded,\n            \n            // Timestamps\n            ordered_at: order.createdAt,\n            created_at: order.createdAt,\n            incomplete_at: order.incompleteAt,\n            completed_at: order.completedAt,\n            updated_at: order.updatedAt,\n            updated_at_api: order.updatedAt,\n            \n            // Metadata\n            location: order.location,\n            notes: order.notes,\n            sales_channel: order.salesChannel,\n            additional_fields: order.additionalFields,\n            raw: order,\n            ingested_at: new Date().toISOString()\n          };\n          \n          ordersToInsert.push(orderRecord);\n          results.orders.processed++;\n          \n          // Process tickets for this order\n          try {\n            const ticketsResponse = await axios.get(`https://api.humanitix.com/v1/events/${event._id}/orders/${order._id}/tickets`, {\n              headers: { 'X-API-Key': HUMANITIX_API_KEY }\n            });\n            \n            const ticketsData = ticketsResponse.data;\n            \n            if (ticketsData.tickets) {\n              for (const ticket of ticketsData.tickets) {\n                if (!(await checkExists('tickets_htx', ticket._id))) {\n                  ticketsToInsert.push({\n                    source: 'humanitix',\n                    source_id: ticket._id,\n                    event_source_id: event._id,\n                    order_source_id: order._id,\n                    session_source_id: ticket.eventDateId,\n                    event_date_id: ticket.eventDateId,\n                    \n                    // Basic ticket info\n                    ticket_type_id: ticket.ticketTypeId,\n                    ticket_type_name: ticket.ticketTypeName,\n                    ticket_number: ticket.number,\n                    \n                    // Attendee info\n                    first_name: ticket.firstName,\n                    last_name: ticket.lastName,\n                    organisation: ticket.organisation,\n                    attendee_profile_id: ticket.attendeeProfileId,\n                    \n                    // Pricing (convert to cents)\n                    price_cents: ticket.price ? Math.round(ticket.price * 100) : null,\n                    net_price_cents: ticket.netPrice ? Math.round(ticket.netPrice * 100) : null,\n                    total_cents: ticket.total ? Math.round(ticket.total * 100) : null,\n                    discount_cents: ticket.discount ? Math.round(ticket.discount * 100) : null,\n                    taxes_cents: ticket.taxes ? Math.round(ticket.taxes * 100) : null,\n                    fee_cents: ticket.fee ? Math.round(ticket.fee * 100) : null,\n                    passed_on_fee_cents: ticket.passedOnFee ? Math.round(ticket.passedOnFee * 100) : null,\n                    absorbed_fee_cents: ticket.absorbedFee ? Math.round(ticket.absorbedFee * 100) : null,\n                    dgr_donation_cents: ticket.dgrDonation ? Math.round(ticket.dgrDonation * 100) : null,\n                    \n                    // Package info\n                    package_id: ticket.packageId,\n                    package_name: ticket.packageName,\n                    package_group_id: ticket.packageGroupId,\n                    package_price_cents: ticket.packagePrice ? Math.round(ticket.packagePrice * 100) : null,\n                    \n                    // Status and flags\n                    status: ticket.status,\n                    is_donation: ticket.isDonation,\n                    cancelled_at: ticket.cancelledAt,\n                    \n                    // Access codes and scanning\n                    access_code: ticket.accessCode,\n                    custom_scanning_code: ticket.customScanningCode,\n                    qr_code_data: ticket.qrCodeData,\n                    \n                    // Seating\n                    seating_map_id: ticket.seatingLocation?.seatingMapId,\n                    seating_name: ticket.seatingLocation?.name,\n                    seating_section: ticket.seatingLocation?.section,\n                    seating_table: ticket.seatingLocation?.table,\n                    seating_seat: ticket.seatingLocation?.seat,\n                    seating_note: ticket.seatingLocation?.note,\n                    \n                    // Check-in info\n                    checked_in: ticket.checkIn?.checkedIn,\n                    check_in_status: ticket.checkIn?.status,\n                    check_in_date: ticket.checkIn?.date,\n                    check_in_location: ticket.checkIn?.location,\n                    check_in_device: ticket.checkIn?.device,\n                    check_in_notes: ticket.checkIn?.notes,\n                    check_in_id: ticket.checkIn?.id,\n                    check_in_user_id: ticket.checkIn?.userId,\n                    check_in_history: ticket.checkInHistory,\n                    \n                    // Swapping info\n                    swapped_from: ticket.swappedFrom,\n                    swapped_to: ticket.swappedTo,\n                    \n                    // Discounts\n                    discounts: ticket.discounts,\n                    \n                    // Metadata\n                    sales_channel: ticket.salesChannel,\n                    currency: ticket.currency,\n                    location: ticket.location,\n                    order_name: ticket.orderName,\n                    additional_fields: ticket.additionalFields,\n                    raw: ticket,\n                    created_at: ticket.createdAt,\n                    updated_at: ticket.updatedAt,\n                    updated_at_api: ticket.updatedAt,\n                    ingested_at: new Date().toISOString()\n                  });\n                  \n                  results.tickets.processed++;\n                }\n              }\n            }\n          } catch (ticketError) {\n            console.error(`Error fetching tickets for order ${order._id}:`, ticketError.message);\n          }\n          \n        } catch (orderError) {\n          console.error(`Error processing order ${order._id}:`, orderError);\n          results.orders.errors++;\n        }\n      }\n    }\n    \n    // Insert orders and tickets for this event\n    if (ordersToInsert.length > 0) {\n      await insertRecords('orders_htx', ordersToInsert);\n    }\n    if (ticketsToInsert.length > 0) {\n      await insertRecords('tickets_htx', ticketsToInsert);\n    }\n    \n  } catch (eventError) {\n    console.error(`Error processing orders for event ${event._id}:`, eventError);\n  }\n}\n\nconsole.log('Sync completed!', results);\nreturn [{ json: results }];"
      },
      "id": "1b9a3b7c-8d4e-4f5g-9h1i-2j3k4l5m6n7o",
      "name": "Complete Humanitix Sync",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        240
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Complete Humanitix Sync",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "12345678-1234-1234-1234-123456789013",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "87654322",
  "tags": []
}