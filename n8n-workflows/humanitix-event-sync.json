{
  "name": "Humanitix Event Sync to Stand Up Sydney",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 1
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Hourly Sync",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://api.humanitix.com/v1/events",
        "authentication": "headerAuth",
        "options": {
          "headers": {
            "x-api-key": "={{ $env.HUMANITIX_API_KEY }}"
          },
          "queryParameters": {
            "page": "1",
            "pageSize": "100",
            "inFutureOnly": "true"
          }
        }
      },
      "id": "fetch-humanitix-events",
      "name": "Fetch Humanitix Events",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Transform Humanitix events to Stand Up Sydney format\nconst humanitixEvents = $input.first().json.events || [];\nconst transformedEvents = [];\n\nfor (const event of humanitixEvents) {\n  // Map comedy events from Humanitix\n  if (event.classification?.category === 'performingAndVisualArts' && \n      event.classification?.subcategory === 'comedy') {\n    \n    transformedEvents.push({\n      // Mapping fields\n      external_id: event._id,\n      external_source: 'humanitix',\n      title: event.name,\n      description: event.description,\n      \n      // Venue information\n      venue: event.eventLocation?.venueName || 'TBA',\n      address: event.eventLocation?.address || '',\n      city: event.eventLocation?.city || 'Sydney',\n      state: event.eventLocation?.region || 'NSW',\n      country: event.eventLocation?.country || 'AU',\n      \n      // Date/time from first date range\n      date: event.dates?.[0]?.startDate || event.startDate,\n      time: new Date(event.dates?.[0]?.startDate || event.startDate).toTimeString().slice(0, 5),\n      endTime: new Date(event.dates?.[0]?.endDate || event.endDate).toTimeString().slice(0, 5),\n      \n      // Type and capacity\n      type: 'comedy-show',\n      spots: event.totalCapacity || 0,\n      capacity: event.totalCapacity || 0,\n      \n      // URLs and images\n      bannerUrl: event.bannerImage?.url || event.featureImage?.url || '',\n      external_ticket_url: event.url,\n      \n      // Requirements and settings\n      requirements: event.additionalQuestions?.map(q => q.question) || [],\n      isVerifiedOnly: false,\n      isPaid: event.pricing?.minimumPrice > 0,\n      allowRecording: true,\n      ageRestriction: '18+',\n      dresscode: '',\n      \n      // Show details\n      showLevel: 'open-mic',\n      showType: 'comedy-show',\n      \n      // Ticketing\n      ticketingType: 'external',\n      externalTicketUrl: event.url,\n      \n      // Additional data\n      humanitix_data: {\n        event_id: event._id,\n        organiser_id: event.organiserId,\n        ticket_types: event.ticketTypes,\n        dates: event.dates,\n        timezone: event.timezone,\n        affiliate_codes: event.affiliateCodes\n      }\n    });\n  }\n}\n\nreturn transformedEvents;"
      },
      "id": "transform-events",
      "name": "Transform Events",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/events",
        "authentication": "headerAuth",
        "options": {
          "headers": {
            "apikey": "={{ $env.SUPABASE_ANON_KEY }}",
            "Authorization": "Bearer {{ $env.SUPABASE_ANON_KEY }}"
          },
          "queryParameters": {
            "external_source": "eq.humanitix",
            "select": "id,external_id,title,date,venue"
          }
        }
      },
      "id": "get-existing-events",
      "name": "Get Existing Events",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "jsCode": "// Determine which events to create/update\nconst humanitixEvents = $('Transform Events').all();\nconst existingEvents = $('Get Existing Events').first().json || [];\n\nconst existingIds = new Set(existingEvents.map(e => e.external_id));\n\nconst toCreate = [];\nconst toUpdate = [];\n\nfor (const event of humanitixEvents) {\n  if (existingIds.has(event.external_id)) {\n    // Find the existing event for comparison\n    const existing = existingEvents.find(e => e.external_id === event.external_id);\n    \n    // Only update if data has changed\n    if (existing && hasChanges(existing, event)) {\n      toUpdate.push({\n        ...event,\n        id: existing.id,\n        updated_at: new Date().toISOString()\n      });\n    }\n  } else {\n    // New event - need to assign a promoter\n    toCreate.push({\n      ...event,\n      // You'll need to set a default promoter_id or map from Humanitix organiser\n      promoter_id: '{{ $env.DEFAULT_PROMOTER_ID }}', // Update this\n      status: 'open',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    });\n  }\n}\n\nfunction hasChanges(existing, newEvent) {\n  return existing.title !== newEvent.title ||\n         existing.venue !== newEvent.venue ||\n         existing.date !== newEvent.date;\n}\n\nreturn {\n  toCreate,\n  toUpdate,\n  summary: {\n    total: humanitixEvents.length,\n    new: toCreate.length,\n    updates: toUpdate.length,\n    unchanged: humanitixEvents.length - toCreate.length - toUpdate.length\n  }\n};"
      },
      "id": "compare-events",
      "name": "Compare Events",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "post",
        "channel": "={{ $env.SLACK_SUPPORT_CHANNEL }}",
        "text": "ðŸŽ­ Humanitix Event Sync Complete\\n\\nðŸ“Š Summary:\\nâ€¢ Total comedy events found: {{ $('Compare Events').first().json.summary.total }}\\nâ€¢ New events to create: {{ $('Compare Events').first().json.summary.new }}\\nâ€¢ Events to update: {{ $('Compare Events').first().json.summary.updates }}\\nâ€¢ Unchanged: {{ $('Compare Events').first().json.summary.unchanged }}\\n\\nâœ… Sync completed at {{ new Date().toLocaleString() }}"
      },
      "id": "notify-sync-complete",
      "name": "Notify Sync Complete",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1340, 300]
    }
  ],
  "connections": {
    "Hourly Sync": {
      "main": [
        [
          {
            "node": "Fetch Humanitix Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Humanitix Events": {
      "main": [
        [
          {
            "node": "Transform Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Events": {
      "main": [
        [
          {
            "node": "Get Existing Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing Events": {
      "main": [
        [
          {
            "node": "Compare Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare Events": {
      "main": [
        [
          {
            "node": "Notify Sync Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}